task clean(type: Delete){
	delete rootProject.buildDir
}

subprojects{

	buildDir = projectOutputFolder
	
	repositories {
		flatDir {
			dirs projectLibsFolder
		}
	}
}
project(':flashlibj'){
	apply plugin: 'java'

	sourceSets{
		main{
			java{
				srcDir 'src'
			}
			
		}
	}
	dependencies {
        compile name: 'WPILib'
		compile name: 'opencv'
		compile name: 'RXTXcomm'
		compile name: 'niVisionWPI'
		compile name: 'TalonSRXLibJava'
    }
	jar {
		baseName 'flashlib'
		//destinationDir project.file('../build')
	}
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		baseName 'flashlib'
		from sourceSets.main.allSource
	}
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		baseName 'flashlib'
		from javadoc.destinationDir
	}
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project(':flashboard'){
	apply plugin: 'java'

	sourceSets{
		main{
			java{
				srcDir 'src'
			}
			resources {
				srcDirs 'src'
				includes = ["**/*.fxml"]
			}
		}
	}
	dependencies {
        compile project(':flashlibj')
		compile name: 'opencv'
    }
	jar {
		manifest {
			attributes (
					'Main-Class': flashboardMainClass,
					'Class-Path': '. libs/flashlib.jar libs/opencv.jar'
			)
		}
	}
	task createFlashboardBuild{		
		doLast{
			copy {
				from projectOutputFolder + 'libs/flashlib.jar'
				from projectLibsFolder + 'opencv.jar'
				into projectOutputFolder + 'flashboard/libs/'
			}
			copy {
				from fileTree(flashboardDistributionFolder)
				into projectOutputFolder + 'flashboard/'
			}
			copy {
				from projectOutputFolder + 'libs/flashboard.jar'
				into projectOutputFolder + 'flashboard/'
			}
			delete projectOutputFolder + 'libs/flashboard.jar'
			println ('created flashboard build')
		}
	}
	
	build.finalizedBy(createFlashboardBuild)
}
